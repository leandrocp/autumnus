===================
JSON body (object)
===================
PUT https://reqres.in/api/users/2
Content-Type: application/json

{
    "name": "morpheus",
    "job": "zion resident"
}

---

(document
  (section
  request: (request
    method: (method)
    url: (target_url)
    header: (header
      name: (header_entity)
      value: (value))
    body: (json_body))))


===================
JSON body (array)
===================
PUT https://reqres.in/api/users/2
Content-Type: application/json

[
    {
        "name": "morpheus",
        "job": "zion resident"
    }
]

---

(document
  (section
  request: (request
    method: (method)
    url: (target_url)
    header: (header
      name: (header_entity)
      value: (value))
    body: (json_body))))


=========
XML body
=========

POST https://example.com/comments HTTP/1.1
Content-Type: application/xml
Accept: application/xml

<?xml version="1.0" encoding="utf-8"?>
<Request>
  <Login>login</Login>
  <Password>password</Password>
</Request>

---

(document
  (section
  request: (request
    method: (method)
    url: (target_url)
    version: (http_version)
    header: (header
      name: (header_entity)
      value: (value))
    header: (header
      name: (header_entity)
      value: (value))
    body: (xml_body))))


=============
GraphQL body query
=============

POST https://api.github.com/graphql
Content-Type: application/json
Authorization: Bearer xxx
X-REQUEST-TYPE: GraphQL

query ($name: String!, $owner: String!) {
  repository(name: $name, owner: $owner) {
    name
    fullName: nameWithOwner
    description
    diskUsage
    forkCount
    stargazers(first: 5) {
        totalCount
        nodes {
            login
            name
        }
    }
    watchers {
        totalCount
    }
  }
}

{
    "name": "vscode-restclient",
    "owner": "Huachao"
}

---

(document
  (section
  request: (request
    method: (method)
    url: (target_url)
    header: (header
      name: (header_entity)
      value: (value))
    header: (header
      name: (header_entity)
      value: (value))
    header: (header
      name: (header_entity)
      value: (value))
    body: (graphql_body
      (graphql_data)
      (json_body)))))

=============
GraphQL body mutation with identifier
=============

POST https://api.github.com/graphql
Content-Type: application/json
Authorization: Bearer xxx
X-REQUEST-TYPE: GraphQL

mutation CreateRepository($name: String!, $owner: String!) {
  repository(name: $name, owner: $owner) {
    name
    fullName: nameWithOwner
    description
    diskUsage
    forkCount
    stargazers(first: 5) {
        totalCount
        nodes {
            login
            name
        }
    }
    watchers {
        totalCount
    }
  }
}

{
    "name": "vscode-restclient",
    "owner": "Huachao"
}


---

(document
  (section
  request: (request
    method: (method)
    url: (target_url)
    header: (header
      name: (header_entity)
      value: (value))
    header: (header
      name: (header_entity)
      value: (value))
    header: (header
      name: (header_entity)
      value: (value))
    body: (graphql_body
      (graphql_data)
      (json_body)))))

=============
GraphQL body without args
=============

POST https://api.github.com/graphql
Content-Type: application/json
Authorization: Bearer xxx
X-REQUEST-TYPE: GraphQL

query Foo {
  repository {
    name
  }
}

{
    "name": "vscode-restclient",
    "owner": "Huachao"
}


---

(document
  (section
  request: (request
    method: (method)
    url: (target_url)
    header: (header
      name: (header_entity)
      value: (value))
    header: (header
      name: (header_entity)
      value: (value))
    header: (header
      name: (header_entity)
      value: (value))
    body: (graphql_body
      (graphql_data)
      (json_body)))))



===================
External body file
===================

POST https://example.com/api/v1/users/new
Content-Type: application/json

< ./user.json

---

(document
  (section
  request: (request
    method: (method)
    url: (target_url)
    header: (header
      name: (header_entity)
      value: (value))
    body: (external_body
      path: (path)))))

========================
External body file (raw)
========================

POST https://example.com/api/v1/users/new
Content-Type: application/json

<@ ./user.json

---

(document
  (section
  request: (request
    method: (method)
    url: (target_url)
    header: (header
      name: (header_entity)
      value: (value))
    body: (external_body
      path: (path)))))

==========================================
External body file, response handler and response redirect
==========================================

POST https://example.com/api/v1/users/new
Content-Type: application/json

< ./user.json

>> ./response_file.json

> ./response_script.js

>>! ./another_file.json

> {%
  // this is an inline script
  context.set_global('foo','bar');
%}

>> ./one_more_file.json

---

(document
  (section
  request: (request
    method: (method)
    url: (target_url)
    header: (header
      name: (header_entity)
      value: (value))
    body: (external_body
      path: (path))
    (res_redirect
      path: (path))
    (res_handler_script
      (path))
    (res_redirect
      path: (path))
    (res_handler_script
      (script))
    (res_redirect
      path: (path)))))


===================
Raw body text
===================

POST https://example.com/api/v1/users/new

# you can't put comments
// before the raw body
blah
< ./this/is/not/a/external/file.json
blah
# comments after the raw body
// are also unavailable
# @except=value declaration comments

---

(document
  (section
    request: (request
      method: (method)
      url: (target_url)
      body: (raw_body)
      (comment
        name: (identifier)
        value: (value)))))

===================
Raw body text 2
===================

POST https://example.com/api/v1/users/new

blah
# you can't put comments
# @except=value declaration comments

---

; !!!!!!!!!!!!!!!!!!!!!!!!!!!!
; DO NOT CHANGE THIS TEST CASE
; THIS IS DIFFERENT FROM ABOVE
; !!!!!!!!!!!!!!!!!!!!!!!!!!!!

(document
  (section
    request: (request
      method: (method)
      url: (target_url)
      body: (raw_body)
      (comment
        name: (identifier)
        value: (value)))))

===========
Form data
===========

POST https://ijhttp-examples.jetbrains.com/post
Content-Type: application/x-www-form-urlencoded

key1 = value1 &
key2 = value2 &
key3 = value3 &
key4 = value4 &
key5 = value5

field6={{value6}}&
field7={{value7}}

---

(document
  (section
  request: (request
    method: (method)
    url: (target_url)
    header: (header
      name: (header_entity)
      value: (value))
    body: (raw_body))))

===========
Multipart-Form-Data
===========

POST https://example.com/api/upload HTTP/1.1
Content-Type: multipart/form-data; boundary=boundary

--boundary
Content-Disposition: form-data; name="first"; filename="input.txt"

// The 'input.txt' file will be uploaded
< ./input.txt

--boundary
Content-Disposition: form-data; name="second"; filename="input-second.txt"

// A temporary 'input-second.txt' file with the 'Text' content will be created and uploaded
Text
--boundary
Content-Disposition: form-data; name="third";

// The 'input.txt' file contents will be sent as plain text.
< ./input.txt --boundary--

---

(document
  (section
    request: (request
      method: (method)
      url: (target_url)
      version: (http_version)
      header: (header
        name: (header_entity)
        value: (value))
      body: (multipart_form_data
        (comment)
        (external_body
          path: (path))
        (comment)
        (comment)
        (external_body
          path: (path))))))
